//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    register(body: Usuario | undefined): Promise<void> {
        let url_ = this.baseUrl + "/4uth/Auth/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    login(body: LoginDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/4uth/Auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    filtrar(body: EventoFiltroDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Event/filtrar";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFiltrar(_response);
        });
    }

    protected processFiltrar(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    crearevento(body: Evento | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Event/crearevento";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCrearevento(_response);
        });
    }

    protected processCrearevento(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    actualizarevento(id: number, body: Evento | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Event/actualizarevento/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processActualizarevento(_response);
        });
    }

    protected processActualizarevento(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    borrarevento(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Event/borrarevento/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBorrarevento(_response);
        });
    }

    protected processBorrarevento(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param nombre (optional) 
     * @param ubicacion (optional) 
     * @return OK
     */
    eventosFiltrados(nombre: string | undefined, ubicacion: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Event/eventos-filtrados?";
        if (nombre === null)
            throw new Error("The parameter 'nombre' cannot be null.");
        else if (nombre !== undefined)
            url_ += "nombre=" + encodeURIComponent("" + nombre) + "&";
        if (ubicacion === null)
            throw new Error("The parameter 'ubicacion' cannot be null.");
        else if (ubicacion !== undefined)
            url_ += "ubicacion=" + encodeURIComponent("" + ubicacion) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEventosFiltrados(_response);
        });
    }

    protected processEventosFiltrados(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    eventodetalles(eventoId: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Event/eventodetalles/{eventoId}";
        if (eventoId === undefined || eventoId === null)
            throw new Error("The parameter 'eventoId' must be defined.");
        url_ = url_.replace("{eventoId}", encodeURIComponent("" + eventoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEventodetalles(_response);
        });
    }

    protected processEventodetalles(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    registrar(body: Inscripcion | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Inscripcion/registrar";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegistrar(_response);
        });
    }

    protected processRegistrar(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    eventoxusuario(body: Inscripcion | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Inscripcion/eventoxusuario";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEventoxusuario(_response);
        });
    }

    protected processEventoxusuario(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    usuariosinscritos(eventoId: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Inscripcion/usuariosinscritos/{eventoId}";
        if (eventoId === undefined || eventoId === null)
            throw new Error("The parameter 'eventoId' must be defined.");
        url_ = url_.replace("{eventoId}", encodeURIComponent("" + eventoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUsuariosinscritos(_response);
        });
    }

    protected processUsuariosinscritos(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    listar(): Promise<void> {
        let url_ = this.baseUrl + "/api/Usuario/listar";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processListar(_response);
        });
    }

    protected processListar(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    actualizar(id: number, body: Usuario | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Usuario/actualizar/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processActualizar(_response);
        });
    }

    protected processActualizar(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class Evento implements IEvento {
    id?: number;
    nombre?: string | undefined;
    descripcion?: string | undefined;
    fechaHora?: Date;
    ubicacion?: string | undefined;
    capacidadMaxima?: number;
    asistentesRegistrados?: number;
    usuarioCreadorId?: number;
    inscripciones?: Inscripcion[] | undefined;

    constructor(data?: IEvento) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nombre = _data["nombre"];
            this.descripcion = _data["descripcion"];
            this.fechaHora = _data["fechaHora"] ? new Date(_data["fechaHora"].toString()) : <any>undefined;
            this.ubicacion = _data["ubicacion"];
            this.capacidadMaxima = _data["capacidadMaxima"];
            this.asistentesRegistrados = _data["asistentesRegistrados"];
            this.usuarioCreadorId = _data["usuarioCreadorId"];
            if (Array.isArray(_data["inscripciones"])) {
                this.inscripciones = [] as any;
                for (let item of _data["inscripciones"])
                    this.inscripciones!.push(Inscripcion.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Evento {
        data = typeof data === 'object' ? data : {};
        let result = new Evento();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nombre"] = this.nombre;
        data["descripcion"] = this.descripcion;
        data["fechaHora"] = this.fechaHora ? this.fechaHora.toISOString() : <any>undefined;
        data["ubicacion"] = this.ubicacion;
        data["capacidadMaxima"] = this.capacidadMaxima;
        data["asistentesRegistrados"] = this.asistentesRegistrados;
        data["usuarioCreadorId"] = this.usuarioCreadorId;
        if (Array.isArray(this.inscripciones)) {
            data["inscripciones"] = [];
            for (let item of this.inscripciones)
                data["inscripciones"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEvento {
    id?: number;
    nombre?: string | undefined;
    descripcion?: string | undefined;
    fechaHora?: Date;
    ubicacion?: string | undefined;
    capacidadMaxima?: number;
    asistentesRegistrados?: number;
    usuarioCreadorId?: number;
    inscripciones?: Inscripcion[] | undefined;
}

export class EventoFiltroDto implements IEventoFiltroDto {
    nombre?: string | undefined;
    ubicacion?: string | undefined;
    fechaHora?: Date | undefined;
    capacidadMaxima?: number | undefined;

    constructor(data?: IEventoFiltroDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nombre = _data["nombre"];
            this.ubicacion = _data["ubicacion"];
            this.fechaHora = _data["fechaHora"] ? new Date(_data["fechaHora"].toString()) : <any>undefined;
            this.capacidadMaxima = _data["capacidadMaxima"];
        }
    }

    static fromJS(data: any): EventoFiltroDto {
        data = typeof data === 'object' ? data : {};
        let result = new EventoFiltroDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nombre"] = this.nombre;
        data["ubicacion"] = this.ubicacion;
        data["fechaHora"] = this.fechaHora ? this.fechaHora.toISOString() : <any>undefined;
        data["capacidadMaxima"] = this.capacidadMaxima;
        return data;
    }
}

export interface IEventoFiltroDto {
    nombre?: string | undefined;
    ubicacion?: string | undefined;
    fechaHora?: Date | undefined;
    capacidadMaxima?: number | undefined;
}

export class Inscripcion implements IInscripcion {
    id?: number;
    usuarioId?: number;
    usuario?: Usuario;
    eventoId?: number;
    evento?: Evento;
    fechaInscripcion?: Date;

    constructor(data?: IInscripcion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.usuarioId = _data["usuarioId"];
            this.usuario = _data["usuario"] ? Usuario.fromJS(_data["usuario"]) : <any>undefined;
            this.eventoId = _data["eventoId"];
            this.evento = _data["evento"] ? Evento.fromJS(_data["evento"]) : <any>undefined;
            this.fechaInscripcion = _data["fechaInscripcion"] ? new Date(_data["fechaInscripcion"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Inscripcion {
        data = typeof data === 'object' ? data : {};
        let result = new Inscripcion();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["usuarioId"] = this.usuarioId;
        data["usuario"] = this.usuario ? this.usuario.toJSON() : <any>undefined;
        data["eventoId"] = this.eventoId;
        data["evento"] = this.evento ? this.evento.toJSON() : <any>undefined;
        data["fechaInscripcion"] = this.fechaInscripcion ? this.fechaInscripcion.toISOString() : <any>undefined;
        return data;
    }
}

export interface IInscripcion {
    id?: number;
    usuarioId?: number;
    usuario?: Usuario;
    eventoId?: number;
    evento?: Evento;
    fechaInscripcion?: Date;
}

export class LoginDto implements ILoginDto {
    correo!: string;
    password!: string;

    constructor(data?: ILoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.correo = _data["correo"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["correo"] = this.correo;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginDto {
    correo: string;
    password: string;
}

export class Usuario implements IUsuario {
    id!: number;
    nombre!: string;
    correo!: string;
    passwordHash!: string;
    rol!: string;
    eventosCreados?: Evento[] | undefined;
    inscripciones?: Inscripcion[] | undefined;

    constructor(data?: IUsuario) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nombre = _data["nombre"];
            this.correo = _data["correo"];
            this.passwordHash = _data["passwordHash"];
            this.rol = _data["rol"];
            if (Array.isArray(_data["eventosCreados"])) {
                this.eventosCreados = [] as any;
                for (let item of _data["eventosCreados"])
                    this.eventosCreados!.push(Evento.fromJS(item));
            }
            if (Array.isArray(_data["inscripciones"])) {
                this.inscripciones = [] as any;
                for (let item of _data["inscripciones"])
                    this.inscripciones!.push(Inscripcion.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Usuario {
        data = typeof data === 'object' ? data : {};
        let result = new Usuario();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nombre"] = this.nombre;
        data["correo"] = this.correo;
        data["passwordHash"] = this.passwordHash;
        data["rol"] = this.rol;
        if (Array.isArray(this.eventosCreados)) {
            data["eventosCreados"] = [];
            for (let item of this.eventosCreados)
                data["eventosCreados"].push(item.toJSON());
        }
        if (Array.isArray(this.inscripciones)) {
            data["inscripciones"] = [];
            for (let item of this.inscripciones)
                data["inscripciones"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUsuario {
    id: number;
    nombre: string;
    correo: string;
    passwordHash: string;
    rol: string;
    eventosCreados?: Evento[] | undefined;
    inscripciones?: Inscripcion[] | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}