/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { 
  apiEventActualizareventoIdPut, 
  ApiEventActualizareventoIdPut$Params 
} from '../fn/event/api-event-actualizarevento-id-put';
import { 
  apiEventBorrareventoIdDelete, 
  ApiEventBorrareventoIdDelete$Params 
} from '../fn/event/api-event-borrarevento-id-delete';
import { 
  apiEventCreareventoPost, 
  ApiEventCreareventoPost$Params 
} from '../fn/event/api-event-crearevento-post';
import { 
  apiEventEventodetallesEventoIdGet, 
  ApiEventEventodetallesEventoIdGet$Params 
} from '../fn/event/api-event-eventodetalles-evento-id-get';
import { 
  apiEventEventosFiltradosGet, 
  ApiEventEventosFiltradosGet$Params 
} from '../fn/event/api-event-eventos-filtrados-get';
import { 
  apiEventFiltrarPost, 
  ApiEventFiltrarPost$Params 
} from '../fn/event/api-event-filtrar-post';
import { Evento } from '../models/evento';

@Injectable({ providedIn: 'root' })
export class EventService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiEventFiltrarPost()` */
  static readonly ApiEventFiltrarPostPath = '/api/Event/filtrar';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEventFiltrarPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiEventFiltrarPost$Response(params?: ApiEventFiltrarPost$Params, context?: HttpContext): Observable<StrictHttpResponse<Evento[]>> {
    return apiEventFiltrarPost(this.http, this.rootUrl, params, context);
  }
  
  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEventFiltrarPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiEventFiltrarPost(params?: ApiEventFiltrarPost$Params, context?: HttpContext): Observable<Evento[]> {
    return this.apiEventFiltrarPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<Evento[]>): Evento[] => r.body)
    );
  }

  /** Path part for operation `apiEventCreareventoPost()` */
  static readonly ApiEventCreareventoPostPath = '/api/Event/crearevento';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEventCreareventoPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiEventCreareventoPost$Response(params?: ApiEventCreareventoPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiEventCreareventoPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEventCreareventoPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiEventCreareventoPost(params?: ApiEventCreareventoPost$Params, context?: HttpContext): Observable<void> {
    return this.apiEventCreareventoPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiEventActualizareventoIdPut()` */
  static readonly ApiEventActualizareventoIdPutPath = '/api/Event/actualizarevento/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEventActualizareventoIdPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiEventActualizareventoIdPut$Response(params: ApiEventActualizareventoIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiEventActualizareventoIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEventActualizareventoIdPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiEventActualizareventoIdPut(params: ApiEventActualizareventoIdPut$Params, context?: HttpContext): Observable<void> {
    return this.apiEventActualizareventoIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiEventBorrareventoIdDelete()` */
  static readonly ApiEventBorrareventoIdDeletePath = '/api/Event/borrarevento/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEventBorrareventoIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEventBorrareventoIdDelete$Response(params: ApiEventBorrareventoIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiEventBorrareventoIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEventBorrareventoIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEventBorrareventoIdDelete(params: ApiEventBorrareventoIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiEventBorrareventoIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiEventEventosFiltradosGet()` */
  static readonly ApiEventEventosFiltradosGetPath = '/api/Event/eventos-filtrados';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEventEventosFiltradosGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEventEventosFiltradosGet$Response(params?: ApiEventEventosFiltradosGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiEventEventosFiltradosGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEventEventosFiltradosGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEventEventosFiltradosGet(params?: ApiEventEventosFiltradosGet$Params, context?: HttpContext): Observable<void> {
    return this.apiEventEventosFiltradosGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiEventEventodetallesEventoIdGet()` */
  static readonly ApiEventEventodetallesEventoIdGetPath = '/api/Event/eventodetalles/{eventoId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEventEventodetallesEventoIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEventEventodetallesEventoIdGet$Response(params: ApiEventEventodetallesEventoIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiEventEventodetallesEventoIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEventEventodetallesEventoIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEventEventodetallesEventoIdGet(params: ApiEventEventodetallesEventoIdGet$Params, context?: HttpContext): Observable<void> {
    return this.apiEventEventodetallesEventoIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
