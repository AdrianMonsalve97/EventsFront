/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiInscripcionEventoxusuarioPost } from '../fn/inscripcion/api-inscripcion-eventoxusuario-post';
import { ApiInscripcionEventoxusuarioPost$Params } from '../fn/inscripcion/api-inscripcion-eventoxusuario-post';
import { apiInscripcionRegistrarPost } from '../fn/inscripcion/api-inscripcion-registrar-post';
import { ApiInscripcionRegistrarPost$Params } from '../fn/inscripcion/api-inscripcion-registrar-post';
import { apiInscripcionUsuariosinscritosEventoIdGet } from '../fn/inscripcion/api-inscripcion-usuariosinscritos-evento-id-get';
import { ApiInscripcionUsuariosinscritosEventoIdGet$Params } from '../fn/inscripcion/api-inscripcion-usuariosinscritos-evento-id-get';

@Injectable({ providedIn: 'root' })
export class InscripcionService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiInscripcionRegistrarPost()` */
  static readonly ApiInscripcionRegistrarPostPath = '/api/Inscripcion/registrar';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiInscripcionRegistrarPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiInscripcionRegistrarPost$Response(params?: ApiInscripcionRegistrarPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiInscripcionRegistrarPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiInscripcionRegistrarPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiInscripcionRegistrarPost(params?: ApiInscripcionRegistrarPost$Params, context?: HttpContext): Observable<void> {
    return this.apiInscripcionRegistrarPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiInscripcionEventoxusuarioPost()` */
  static readonly ApiInscripcionEventoxusuarioPostPath = '/api/Inscripcion/eventoxusuario';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiInscripcionEventoxusuarioPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiInscripcionEventoxusuarioPost$Response(params?: ApiInscripcionEventoxusuarioPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiInscripcionEventoxusuarioPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiInscripcionEventoxusuarioPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiInscripcionEventoxusuarioPost(params?: ApiInscripcionEventoxusuarioPost$Params, context?: HttpContext): Observable<void> {
    return this.apiInscripcionEventoxusuarioPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiInscripcionUsuariosinscritosEventoIdGet()` */
  static readonly ApiInscripcionUsuariosinscritosEventoIdGetPath = '/api/Inscripcion/usuariosinscritos/{eventoId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiInscripcionUsuariosinscritosEventoIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiInscripcionUsuariosinscritosEventoIdGet$Response(params: ApiInscripcionUsuariosinscritosEventoIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiInscripcionUsuariosinscritosEventoIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiInscripcionUsuariosinscritosEventoIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiInscripcionUsuariosinscritosEventoIdGet(params: ApiInscripcionUsuariosinscritosEventoIdGet$Params, context?: HttpContext): Observable<void> {
    return this.apiInscripcionUsuariosinscritosEventoIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
